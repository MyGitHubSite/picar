12/25/2017
- TODO: today
  > arduino only RC/pwm control. /done
  > deeppicar integration: video recording. nn controller.
  
12/24/2017
- TODO: Today
  > RC control through arduino (pca9685) /done
  > integration w/ donkey code (--rcjs)
  > deeppicar pca9685 support
  > camera latency comparison
=====
- USB camera has higher latency than CSI based one. 
PI camera (CSI?):  100 ms
PS3 Eye (USB):     300 ms

CSI-2 MIPI I/F 
https://www.mipi.org/sites/default/files/Camera%20Serial%20Interface_CSI2_CSI3_Overview.pdf


8/26/2017

python timertest3.py
time (1503873382.7663)
time (1503873382.9664)
time (1503873383.1663)
time (1503873383.3664)
time (1503873383.5663)
time (1503873383.7663)
time (1503873383.9664)
time (1503873384.1663)

time=1503873423.3327 dur=0.0000
time=1503873423.5330 dur=0.2003
time=1503873423.7333 dur=0.2003
time=1503873423.9336 dur=0.2003
time=1503873424.1339 dur=0.2003
time=1503873424.3342 dur=0.2003

8/15/2017

btn model

step 1930 of 2000, train loss 0.000477208319353, val loss 0.199691697955
step 1940 of 2000, train loss 5.4560485296e-05, val loss 0.599819481373
step 1950 of 2000, train loss 0.00156429770868, val loss 0.53919839859
step 1960 of 2000, train loss 0.00117544317618, val loss 0.361430972815
step 1970 of 2000, train loss 2.61894947471e-05, val loss 0.543541789055
step 1980 of 2000, train loss 0.000329648493789, val loss 0.470055699348
step 1990 of 2000, train loss 0.000159062867169, val loss 0.680700659752
step 2000 of 2000, train loss 9.58305899985e-05, val loss 0.417998790741
Model saved. Time passed: 00 hours 03 mins 10 secs 000 msecs. Time left: 00 hours 00 mins 00 secs 000 msecs
('Accuracy:', 0.89000005)
('Prediction: ', array([2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 2, 2, 1, 2, 2,
       2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 2, 1, 2, 2,
       2, 2, 2, 1, 1, 1, 2, 1, 2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 1, 2, 2, 2,
       2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 2, 1, 2, 2,
       2, 2, 2, 2, 2, 2, 1, 2]))


8/14/2017

- normal initialization

step 10 of 2000, train loss 0.105480730534, val loss 0.154404461384
step 20 of 2000, train loss 0.0755970701575, val loss 0.108059942722

step 1990 of 2000, train loss 0.00231279851869, val loss 0.0685500577092
step 2000 of 2000, train loss 0.00154148018919, val loss 0.05231320858


- xavier initialization
step 10 of 2000, train loss 0.0830884277821, val loss 0.105706237257
step 20 of 2000, train loss 0.0990819483995, val loss 0.101846121252
step 30 of 2000, train loss 0.0813312232494, val loss 0.0978090465069

step 1980 of 2000, train loss 0.0041149193421, val loss 0.0778324007988
step 1990 of 2000, train loss 0.00337700662203, val loss 0.0638740062714
step 2000 of 2000, train loss 0.00387647259049, val loss 0.0557858645916


7/16/2017

100 - 

7/15/2017

DAgger method: use dnn input to control, use human input for data collection.

video 22 - 

- Old
vlc v4l2:///dev/video0
mplayer tv:// -tv driver=v4l2:width=640:height=480:device=/dev/video0

cvlc v4l2:///dev/video0 :v4l2-standard= :input-slave=alsa://hw:0,0 :live-caching=300 :sout="#transcode{vcodec=WMV2,vb=800,scale=1,acodec=wma2,ab=128,channels=2,samplerate=44100}:http{dst=:8080/stream.wmv}"

	
http://stackoverflow.com/questions/24017930/how-to-stream-with-ffmpeg-via-http-protocol

ffmpeg -f v4l2 -r 25 -i /dev/video0 http://192.168.0.108:8090/cam1.ffm

avconv -f oss -f video4linux2 -i /dev/video0 out.mpg
  > 4 threads. 30-50% util

mencoder tv:// -tv driver=v4l2:device=/dev/video0 -ovc lavc -noaudio -o webcam.avi
  > 1 thread, 80% util
